// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWW28cNw/9K4S+DzBQTL1G2r7sW+30EqAXI5u3JA+0hjujeEaSKcnG2pj/XlBz2dlb",
	"uwHqh77tSKR4yMND7ovSrvXOko1BLV+UR8aWInH+usXKWIzG2ZUnLSclBc3Gy5Faqg81gZ9sQDu7NlXi",
	"/mvtGGJN8JCIN5efLMA3cHGLFa3MM11A8KTN2lDIRja1d8Tg1sAUUhMDMMXElsrB8SZxcHwBZnsDdxvw",
	"TI/GpQAamyYA2nL28FONUfARRDd4fbKqUEawZ1iqUBZbUsv9VAsVdE0t5pqw88TRUK5JD0R+xY0XzxDZ",
	"2Ep1hRqTm10aG6kiVl1XjEfu7gvpqDo5Ygre2dC/fI3lLxjpCTfypZ2NZKP8RO8bozO4xZcglX+Zwfs/",
	"01ot1f8WWyYX/W1Y/MTsuA91yFwgfiQGstolG4mpBLRA4iJUWtLR2EpqJwyVGBHuUN+TLSXZayzf00Oi",
	"EF8f7TWWwH2wAkLSNWCANbsWjH3ExpTgGFoTguCdtXBXqHeSmcVmlZPtI7w63jEo9FFhMJQO0fdY0R/Y",
	"0m/mKytnIrXhnyDNAqhtyyEzbo4B/REaE6LIzveOIHII8GRiLawbhpI82ZJshNwmuai3iZtXwp+4+Urg",
	"iZuQ9TW8ISEmnne1+zuFgBUdEW/W4kMyTKVafpwMPx+odofDwwhvx2rdSLGODYJCjZ6HEA5jSTmOmHYy",
	"xNZOLW1qmkI5Txa9UUv13eXV5ZUqlMdYZ0ALtNhsggmLkUg9QK0o4xP0mbJ3pdRVrJ/p7dy22NkKH48T",
	"uDVZ7I3Srji2NoLjCI7LfujHvEhyXcMw8NdZ8FZvLuBb+DC7n5oTalPVFOJseUzNOr4StGPSyOXpVxr3",
	"JI/86cmuVj/D5NH/OrkwJAE175rIieZrg2xqpZemRPJSGR6fddZE6ue9ffDm6uqUXCa7xf5E6Qr1/Tl+",
	"s/HdFeqHc1yOjdLs++ascONuy1JNbYu8kVEpbJn1JlPRuhDBtN5xRBthp2PFbVETNrF+Ptm+v+b7m5r0",
	"vTpezbPH1RHJ7Q/5UryHPzDDMjUBeoz7efbIQAu0mUOfVm6t8wT6niIbenxlhWY9Jm5GbW6XwKCfE6IQ",
	"n78Vxb/T8+P6+a81+0jeTk2FQakzTrXtuq77KwAA///MJthNmQsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
