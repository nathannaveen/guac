// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWS2/bRhD+K4NtAQMFGxlpe9GtdvoI0IcR55bkMF6OyI3J3fXsrg3Z4H8vZvkQJVOp",
	"AtSH3kRyHt/MN9+MnpR2rXeWbAxq/aQ8MrYUifPTFVbGYjTOXnvS8qakoNl4eaXW6n1N4Ccb0M5uTJW4",
	"f9o4hlgT3CXi7auPFuA7OLvCiq7NI51B8KTNxlDIRja1N8TgNsAUUhMDMMXElsrB8TJxcHwGZvcFbrbg",
	"me6NSwE0Nk0AtOUs8EONUfARRDd4fbSqUEawZ1iqUBZbUuvDUgsVdE0t5p6w88TRUO5JD0R+xa0XzxDZ",
	"2Ep1hRqLm300NlJFrLquGF+5m8+ko+rkFVPwzoY+8gWWv2GkB9zKk3Y2ko3yE71vjM7gVp+DdP5pBu9b",
	"po1aq29WOyZX/dew+oXZcZ/qOXOB+J4YyGqXbCSmEtACiYtQaUlHYyvpnTBUYkS4QX1LtpRiL7B8R3eJ",
	"Qnx5tBdYAvfJCghJ14ABNuxaMPYeG1OCY2hNCIJ3NsJdod5KZRab61xsn+HF8Y5Joc8Kg6FMiL7Fiv7C",
	"lv4wX9k5E6kN/wZplkDtRg6ZcbsE9GdoTIgiO987gsghwIOJtbBuGEryZEuyEfKY5KZeJW5eCH/i5iuB",
	"J25C1tcQQ1JMPO9r908KAStaEG/W4l0yTKVaf5gMPz1T7R6HzzO8Gbt1Kc1aWgSFGj2/DCFbFYcBFwFJ",
	"zxbidbLpNk6tbWqaQjlPFr1Ra/XDq/NX56pQHmOdUa/QYrMNJqxGtvVQT0W5CCkx8/q2lOaL9SO9mdsW",
	"e6fjwzLLO5PVwb7tiqXbEhxHcFz2lyHma5ObH4arsMlbwertGXwP72ffpwmG2lQ1hTi7MNNEj1GCdkwa",
	"uTwepXEPEuRvT/b6+leYPPpfR6+KFKDmvEZONL8tZFMrbE+F5MszBJ+xPZH66eBovD4/P6apyW51uHa6",
	"Qv14it9sx3eF+ukUl6V9m31fn5RuPIBZz6ltkbeyT4Uts9lmKloXIpjWO45oI+xNrLitasIm1o9Hx/f3",
	"/P2yJn2rlrt58k5bkNzhJSjFe/iXM1xcE6DHeFhnjwy0QJs59GXl0TpNoO8osqH7F1Zo1mPiZtTm7lIM",
	"+jkiCvH5oij+m5kfb9T/bdhH8vZ6KgxKn3Hqbdd13T8BAAD//ySd6OO+CwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
