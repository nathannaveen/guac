// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY247bNhN+lQH/H1igUNeLtL3xXXa3hxTtJogD9CIJFjQ5shhTpEJS3jqB370Y6izL",
	"joLuBuidLXLO34y+0WcmbF5YgyZ4tvzMCu54jgFd/PeKb5ThQVmzKlDQE4leOFXQI7ZkbzKEor0DwppU",
	"bUpX/Uutg5AhfCzR7S/fGYDv4OIV3+BKfcIL8AUKlSr08ZIp8zU6sCk49KUOHhyG0hmUteBN6bx1F6C6",
	"E1jvoXC4U7b0ILjWHriRPcUPGQ/kH0KwtdQ7wxKmyPfoFkuY4Tmy5TjUhHmRYc5jTpwt0AWFMSeVI/Qr",
	"7AuS9MEps2GHhDXB9Q6VCbhBxw6HpHlk1x9QBHagRw59YY2vNF9z+SsP+MD39E9YE9AE+smLQisRnVt8",
	"8JT5zz33/u8wZUv2v0VXyUV16hc/O2ddZeq4ch7dDh2gEbY0AR1K4AaQRKiUBkVQZkO5owpJHjisudii",
	"kRTsNZev8WOJPjy9t9dcgquMJeBLkQH3kDqbgzI7rpUE6yBX3pO/PQgfEvaCIjNcr2KwlYUn97cxCpVV",
	"qC8SQsSWb/CO5/iH+srMqYC5/5JLPQOsgxx3ju+nHH0OWvlAbVdUgkDt4OFBhYyqrhxILNBINAEiTGJS",
	"X5VOP5H/pdNf6XjptI/9VesgE22dh737J3rPNzjRvLEXP5bKoWTLt+3F90ddm7C75ze3K2Ed9uA/NCOc",
	"CkpwrcL++LCadPc2vW8z649vbe93XJd4PHJvLKapEooKQhPWkx3q0sEQ7VRfsjaE6phC0Ke0v0xTj6Ed",
	"3bMVPqDaZOFY31/xOSk4pQ6UiWd2h45rDb3cgacsT9gbFavJVRdX69Bx/Q4TFe3ZvJ8XSd/LUQCnnE6Y",
	"VlvUKrNWHtc7Sgnu5CNBodV3zp+ZKJija17aRprGqesS9M1K35mcWfmejzMLP3J5AmxTbgxQObjxpaFU",
	"MYrBxD05nu6j09PEro9xmwJvXhEUoim15muNbBlciWexfs5EL5l9C7DBEKkHh12pDTq+VuTGLMs5BqeE",
	"PzZ4i4ErjRLqG8AN13uv4kSbN6OHCu/acVb7TVSWh3q4gSV4KD8jbS1JTLo5cC5tLws0q9UvsBq1U4To",
	"LIs9bB5BqdhuIn04jpfn2LRBbaJDe8eCnfLbc97TeVXuQXG/FmNTrg9Zw4BuHbfBbVPaG+I1U5w9YY3k",
	"ebYQbyVjhVNtGunNhL4DLSWpZUsKOmG2QMMLxZbsh8uryyvCJw9Z9HrRoHbRQFPU8WwwBkEhRgr2QhJP",
	"otuf8LZ/NxlseW+nCVl3ZTFajQ7JVFW9dQGsk1VD9CDi6wUujQTeiP0FfA9veuct2YRMbTL0YZIn1Fra",
	"/jitRdsHUtI0yeidc3IBpABYv64V6jr+iqbMqdptIKzXrr1qt0V9P9rvnl1dnaK/7b3FeEM4JOzHOXK9",
	"deyQsJ/miEytRlH22Sxzza4aqXeZ59ztafWhaql0H0uRWx9A5YV1gZsAA8SS2CJDrkP26SR8f4vnNxmK",
	"LZvO5uz1Y6LlxkubJOn6g0S9HCsPlY/jOCvPQJBrPYEqrAiteQ36ml5GuHviDo39WDrd9Ga31HWDfKop",
	"SOZsUzwO5pt18r8G9qZ4g5xSBQcvswoTcVQQTYtvIusnsLBqr1QpRx+urXy8r0FHm+tEF/y+enkH0ooy",
	"r1Z+E7gyxMUa1lRtGpbqnYAyQpeSjvtskRvZp3YpF8E6fwlviJy0upUHG61yncC6DKBSKJzdKYkyAWLU",
	"3fsauENoUHjJDv9yFsxMUs2kJ7K0qhJQf6ys3j3yNL/81rgegDQGExF6h38HeC5iztca4aauGbTDZw9r",
	"7jFy16YUTTiUhsM/AQAA///516xrLxYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
