// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYS2/cNhD+KwO2gIFC9Rppe/EttvtI0dpBNkAOSQ5cciQxS5EKSa27Cfa/F0M9Vq+1",
	"FSQu0JstkjMf5/tmOLOfmbBFaQ2a4NnlZ1ZyxwsM6OJ/L3mmDA/KmnWJgr5I9MKpkj6xS/Y6Ryi7PSCs",
	"SVVWufq/1DoIOcLHCt3+/J0B+AHOXvIM1+oTnoEvUahUoY+bTFVs0IFNwaGvdPDgMFTOoGwOXlfOW3cG",
	"6rgCmz2UDnfKVh4E19oDN7Jn+D7ngfAhBNucemdYwhRhj7BYwgwvkF2Or5owL3IseIyJsyW6oDDGpAZC",
	"f4V9SSd9cMpk7JCw9nK9RWUCZujY4ZC0n+zmA4rADvTJoS+t8bXlKy5/5wHv+Z7+E9YENIH+5GWplYjg",
	"Vh88Rf5zD973DlN2yb5bHZlc1at+9atz1tWupsx5dDt0gEbYygR0KIEbQDpCVBoUQZmMYkcMSR44bLjY",
	"opF02SsuX+HHCn14erRXXIKrnSXgK5ED95A6W4AyO66VBOugUN4T3p6EDwl7QTczXK/jZWsPT463dQq1",
	"V2g2kkLElmd4ywv8S31h5FTAwj8GqeeAHSXHneP7OaDPQSsfKO3K+iBQOni4VyEn1pUDiSUaiSZAlEkM",
	"6svK6SfCXzn9hcArp33Mr8YGueh4Hubu3+g9z3AmeWMufqyUQ8ku33Yb30+yNmG3z69v1sI67Ml/6EY4",
	"FZTgWoX9dLGudHfpTRtXP92znZbaa4tpqoQiIqiyerJP2Tkonh1Z/px10Otlgq6ndu/S1GPoivViU/eo",
	"sjxM7b2J38nAKXOgTFyzO3Rca+hFCzzFdcbfiJ4to7t0IKYsHWZ46/l5swh8H9gI8ymcCdNqi1rl1sop",
	"rfGU4E5+NeOdpYeQPEr2EivLeB5ZGofrGJQnZfjoZhnBPVgL+R2hnEpqBsRAeYMNj5WXujcY1M6ThSYe",
	"me/Q+jq2KfC21j+i3wcs9gLXNwgZhtgycNhV2qDjG0VeZx0VGJwSfurgBgNXGiU0O4AbrvdexTq0pJYO",
	"zd12JahBSQ0nD01BAkvEKz8Tk651S46J+0BM7ko06/VvsB6lQtTarIOeqCYqKLdZfMOn1+EFtvptTB4t",
	"HltRp/z2AbC0XFM3IOoxecwhHb7UgxZnKtiOqGvqJeb65IS1Jx9+oeOuZGxwLqFiSzFj70CDQGrZpam0",
	"Tpgt0fBSsUv20/nF+QVpjYc8ol61Cly1r5ho7pNhvARdMbY9LyT1JrT7E9709yaDyertfBN03LIajSOH",
	"ZI5Fb10A62Qt754ifDM0pbFpNmJ/Bj/C69561+BBrrIcfZh9qRsrnfpPW9H2noy0OTB6Dk4OXXQB1uc1",
	"uAr7oxeaqiC2u4uwXjL22O5IfT+aqZ5dXJxqObt9q3FXfkjYz0vO9UagQ8J+WXJkbhyJZ58tctfOh7Hd",
	"rYqCuz2NG8SWSveRisL6AKoorQvcBBgolo6tcuQ65J9OyvePuH6do9iy+WgubvlnUm48KEk63fwI0Ayk",
	"ykONcXzPGhkIgtY7UF8rSmtZgr6ihwV3T5yhMR8rp9vcPA5Sx7o9lxR05sGk+Daab0e4/5vYW/IGMSUG",
	"B49XrYlYKqihii+R9TNaWHdb6pCjD1dWfrtfYCbT4kwW/Lm+uwVpRVXUY7YJXBnqo9oOqG7/LfGdgDJC",
	"V5KW+40dN7LflqVcBOv8Obym3qOzrTzY6JXrBDZVAJVC6exOSZQJUOd7fK+BO4RWhefs8JW1YGGQmp53",
	"JkrrOgDND4T12yNP94r/ta4HIo2XiQq9xX8CPBcx5huNcN1wBl3x2cOGe4ydaEtFex0Kw+HfAAAA//8S",
	"vbLYoxUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
